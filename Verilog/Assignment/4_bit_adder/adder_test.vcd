$date
	Wed May 15 19:22:39 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module adder_test $end
$var wire 4 ! S [3:0] $end
$var wire 1 " C $end
$var reg 4 # A [3:0] $end
$var reg 4 $ B [3:0] $end
$scope module uut $end
$var wire 4 % A [3:0] $end
$var wire 4 & B [3:0] $end
$var wire 3 ' x [2:0] $end
$var wire 4 ( S [3:0] $end
$var wire 1 " C $end
$scope module FA0 $end
$var wire 1 ) a $end
$var wire 1 * b $end
$var wire 1 + cin $end
$var wire 1 , cout $end
$var wire 1 - s $end
$upscope $end
$scope module FA1 $end
$var wire 1 . a $end
$var wire 1 / b $end
$var wire 1 0 cin $end
$var wire 1 1 cout $end
$var wire 1 2 s $end
$upscope $end
$scope module FA2 $end
$var wire 1 3 a $end
$var wire 1 4 b $end
$var wire 1 5 cin $end
$var wire 1 6 cout $end
$var wire 1 7 s $end
$upscope $end
$scope module FA3 $end
$var wire 1 8 a $end
$var wire 1 9 b $end
$var wire 1 : cin $end
$var wire 1 " cout $end
$var wire 1 ; s $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
x;
x:
x9
08
x7
x6
x5
x4
03
x2
x1
00
x/
1.
x-
0,
0+
x*
0)
bx (
bx0 '
bx &
b10 %
bx $
b10 #
x"
bx !
$end
#20
0;
17
0:
15
06
0"
1-
b101 !
b101 (
02
b10 '
11
1*
1/
04
09
b11 $
b11 &
#40
